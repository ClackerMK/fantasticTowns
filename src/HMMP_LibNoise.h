#ifndef HMMP_LIBNOISE_H 
#define HMMP_LIBNOISE_H

#include <SFML/Graphics.hpp>
#include <SFML/System.hpp>
#include <noise/noise.h>

#include <random>
#include <math.h>
#include <iostream>

#include "HeightMapModificationProcess.h"


// Height-map Modificator that increases the height of the Map by using noise generated by the LibNoise Libary 
class HMMP_LibNoise : public CHeightmapModificationProcess
{
private:
	noise::module::Perlin m_Perlin;

	double 			m_amplitude = 1;
	double 			m_step = 0.005;

	std::mt19937	m_randGenerator;
public:

	virtual void operator()(CHeightMap* map, int seed)
	{
		sf::RenderWindow wndw (sf::VideoMode(map->getSize().x, map->getSize().y,32), "Perlin Noise");
		sf::Clock clk;


		m_Perlin.SetSeed(seed);

		for (int x = 0; x < map->getSize().x; x++)
		{
			for (int y = 0; y < map->getSize().y; y++)
			{
				map->setValue(sf::Vector2u(x,y), (map->getValue(sf::Vector2i(x,y)) + m_Perlin.GetValue(static_cast<double>(x) * m_step, static_cast<double>(y) * m_step, 1)/2 + 0.5) * m_amplitude);
				if (clk.getElapsedTime() > sf::milliseconds(10))
				{
					wndw.clear(sf::Color::White);
					wndw.draw(*map);
					wndw.display();

					clk.restart();
				}
			}
		}

		double min = map->getMinEle();
		if (min < 0){
			for (int x = 0; x < map->getSize().x; x++)
			{
				for (int y = 0; y < map->getSize().y; y++)
				{
					map->setValue(sf::Vector2u(x,y), map->getValue(sf::Vector2i(x,y)) + min);
				}
			}
		}
	};

	// Getter and Setter
	void setAmplitude (double amp)						{m_amplitude = amp;}	 
	void setStep(double step)							{m_step = step;}
	void setLacunarity (double lacunarity)				{m_Perlin.SetLacunarity(lacunarity);}
	void setOctaveCount (double octaveCount)			{m_Perlin.SetOctaveCount(octaveCount);}
	void setNoiseQuality (noise::NoiseQuality quality)	{m_Perlin.SetNoiseQuality(quality);}
	void setPersistence (double persistence)			{m_Perlin.SetPersistence(persistence);}

	double getAmplitude() const		{return m_amplitude;}
	double getStep() const 			{return m_step;}
	double getLacunarity() const	{return m_Perlin.GetLacunarity();}
	double getOctaveCount() const	{return m_Perlin.GetOctaveCount();}
	int getNoiseQuality() const 	{return m_Perlin.GetOctaveCount();}
};

#endif